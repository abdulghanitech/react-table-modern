{"version":3,"sources":["../../src/index.tsx","../../src/utils.ts","App.tsx","index.tsx"],"names":["paginationRequired","paginationItemsPerPage","useState","count","data","getTotalPages","Math","getPageNumbers","result","totalPages","allPages","index","paginatedDataArray","currentPage","style","backgroundColor","className","styles","columns","column","item","dataField","cell","target","directGet","pathArray","join","replace","split","curr","e","getCell","React","display","justifyContent","alignItems","paddingBottom","marginTop","gap","borderRadius","paddingLeft","paddingRight","paddingTop","borderWidth","borderStyle","borderColor","outline","outlineOffset","appearance","value","itemsPerPage","onChange","Number","setItemsPerPage","cursor","startIndex","padding","color","disabled","onClick","setStartIndex","setEndIndex","endIndex","height","width","margin","undefined","setCurrentPage","name","address","city","street","country","phone","email","website","text","sort","App","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f63fb2bf.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styles from './styles.module.css'\nimport getCell from './utils'\n\ninterface Props {\n  data: any[]\n  columns: any[]\n  paginationRequired?: boolean\n  paginationItemsPerPage?: number\n}\n\nconst ReactTableModern = ({\n  data,\n  columns,\n  paginationRequired = true,\n  paginationItemsPerPage = 5\n}: Props) => {\n  \n  const [startIndex, setStartIndex] = useState(0)\n  const [endIndex, setEndIndex] = useState(5)\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(paginationItemsPerPage)\n\n  const count = data.length || 0\n\n\n  const getTotalPages = () => {\n    return Math.ceil(count / itemsPerPage)\n  }\n\n  const getPageNumbers = () => {\n    let result: Array<number> = []\n    if (count && itemsPerPage) {\n      const totalPages = getTotalPages()\n\n      const allPages = []\n      for (let index = 0; index < totalPages; index++) {\n        allPages[index] = index + 1\n      }\n      if (totalPages === 0) return result\n\n      return allPages.slice(startIndex, endIndex)\n    }\n    return result\n  }\n\n  let paginatedDataArray = paginationRequired\n    ? data.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\n    : data\n\n  const Pagination = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          paddingBottom: '1rem',\n          marginTop: 4\n        }}\n      >\n        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n          <div\n            className='select-wrapper'\n            style={{\n              backgroundColor: 'white',\n              borderRadius: 9999,\n              paddingLeft: '1rem',\n              paddingRight: '0.5rem',\n              paddingTop: '0.5rem',\n              paddingBottom: '0.5rem',\n              borderWidth: 2,\n              borderStyle: 'solid',\n              borderColor: 'rgba(156, 163, 175)',\n              outline: '2px solid transparent',\n              outlineOffset: 2\n            }}\n          >\n            <select\n              style={{\n                appearance: 'none',\n                outline: '2px solid transparent',\n                outlineOffset: 2\n              }}\n              value={itemsPerPage}\n              onChange={(e) => {\n                let itemsPerPage = Number(e.target.value)\n                setItemsPerPage(itemsPerPage)\n              }}\n            >\n              {[5, 10, 25, 50, paginationItemsPerPage].map((item) => (\n                <option value={item}>{item + ' items'}</option>\n              ))}\n            </select>\n            <span className='text-md text-blue-600 bp3-icon bp3-icon-chevron-down' />\n          </div>\n          per page\n        </div>\n\n        <div>\n          <div style={{ display: 'flex' }}>\n            <button\n              style={{\n                backgroundColor: '#F0F0F1',\n                cursor: startIndex >= 5 ? 'pointer' : 'not-allowed',\n                borderRadius: 9999,\n                padding: '0.5rem 1rem',\n                borderStyle: 'none',\n                color: 'black'\n              }}\n              disabled={!(startIndex >= 5)}\n              onClick={() => {\n                if (startIndex < getTotalPages()) {\n                  if (startIndex >= 5) {\n                    setStartIndex(startIndex - 5)\n                    setEndIndex(endIndex - 5)\n                  }\n                }\n              }}\n            >\n              Previous\n            </button>\n            {getPageNumbers().length > 0 &&\n              getPageNumbers().map((item: number) => (\n                <button\n                  style={{\n                    backgroundColor: currentPage === item ? '#FFF' : '#F0F0F1',\n                    borderRadius: 9999,\n                    color: 'black',\n                    height: '2.5rem',\n                    width: '2.5rem',\n                    margin: '0 0.25rem',\n                    borderStyle: 'solid',\n                    borderWidth: currentPage === item ? 2 : undefined,\n                    borderColor:\n                      currentPage === item ? 'rgba(156, 163, 175)' : undefined\n                  }}\n                  onClick={() => setCurrentPage(item)}\n                >\n                  {item}\n                </button>\n              ))}\n            <button\n              style={{\n                backgroundColor: '#F0F0F1',\n                cursor: getTotalPages() > endIndex ? 'pointer' : 'not-allowed',\n                borderRadius: 9999,\n                padding: '0.5rem 1rem',\n                borderStyle: 'none',\n                color: 'black'\n              }}\n              disabled={!(getTotalPages() > endIndex)}\n              onClick={() => {\n                if (getTotalPages() > endIndex) {\n                  setStartIndex(startIndex + 5)\n                  setEndIndex(endIndex + 5)\n                }\n              }}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div style={{ backgroundColor: '#f9f9f9' }}>\n      <table className={styles.reactTableModern}>\n        <tr className={styles.reactTableModernHeader}>\n          {columns &&\n            columns.length > 0 &&\n            columns.map((column) => (\n              <td className={styles.reactTableModernHeaderCells}>\n                {column.text}\n              </td>\n            ))}\n        </tr>\n\n        <tbody>\n          {data && data.length > 0 && paginatedDataArray\n            ? paginatedDataArray.map((item) => {\n                return (\n                  <tr>\n                    {columns &&\n                      columns.length > 0 &&\n                      columns.map((column) => {\n                        const { dataField } = column\n                        const cell = getCell(item, dataField)\n                        return (\n                          <td className={styles.reactTableModernCells}>\n                            {cell}\n                          </td>\n                        )\n                      })}\n                  </tr>\n                )\n              })\n            : 'No Data!'}\n        </tbody>\n      </table>\n      <Pagination />\n    </div>\n  )\n}\n\nexport default ReactTableModern\n","function splitNested(str: string) {\r\n  return [str].join('.').replace(/\\[/g, '.').replace(/\\]/g, '').split('.')\r\n}\r\n\r\nfunction getCell(target: object, field: string) {\r\n  const directGet = target[field]\r\n  if (directGet !== undefined && directGet !== null) {\r\n    return directGet\r\n  }\r\n\r\n  const pathArray = splitNested(field)\r\n  let result\r\n  try {\r\n    result = pathArray.reduce((curr, path) => curr[path], target)\r\n  } catch (e) {}\r\n  return result\r\n}\r\n\r\nexport default getCell\r\n","import React from 'react'\n\nimport ReactTableModern from 'react-table-modern'\nimport 'react-table-modern/dist/index.css'\n\nconst data = [\n  {\n    name: 'Abdul Ghani',\n    address: { city: 'Hyd', street: 'stret', country: 'India' },\n    phone: '9191919191',\n    email: 'hello@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 2',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.me'\n  },\n  {\n    name: 'Abdul Ghani 3',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.me'\n  },\n  {\n    name: 'Abdul Ghani 4',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.me'\n  },\n  {\n    name: 'Abdul Ghani 5',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.me'\n  },\n  {\n    name: 'Abdul Ghani 6',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.me'\n  }\n]\n\nconst columns = [\n  {\n    dataField: 'name',\n    text: 'Name',\n    sort: true\n  },\n  {\n    dataField: 'address.country',\n    text: 'Address',\n    sort: true\n  },\n  {\n    dataField: 'phone',\n    text: 'Phone'\n  },\n  {\n    dataField: 'email',\n    text: 'Email'\n  },\n  {\n    dataField: 'website',\n    text: 'Website'\n  }\n]\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n      }}\n    >\n      <h1>Say Hello to Modern React Table 🔥</h1>\n\n      <ReactTableModern\n        data={data}\n        columns={columns}\n        paginationItemsPerPage={3}\n        // paginationRequired={false}\n      />\n    </div>\n  )\n  \n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}