{"version":3,"sources":["../../src/assets/chevronDown.tsx","../../src/components/Dropdown.tsx","../../src/index.tsx","../../src/utils.ts","App.tsx","index.tsx"],"names":["ChevronDown","width","height","viewBox","fill","xmlns","d","Dropdown","props","setItemsPerPage","useState","style","selectWrapperStyle","display","cursor","onClick","setshowDropdown","React","itemsPerPage","showDropdown","position","top","left","background","padding","borderRadius","borderWidth","borderStyle","borderColor","paginationItemsPerPage","map","item","className","paginationRequired","count","data","getTotalPages","Math","getPageNumbers","result","totalPages","allPages","index","paginatedDataArray","currentPage","PaginationWrapperStyle","justifyContent","alignItems","paddingBottom","marginTop","backgroundColor","paddingLeft","paddingRight","paddingTop","outline","outlineOffset","selectStyle","appearance","nextAndPrevBtnStyle","color","paginationBtns","margin","tableWrapperStyle","tableStyle","borderCollapse","borderSpacing","tableHeaderStyle","fontWeight","tableHeaderCellsStyle","tableCellsStyle","lineHeight","columns","column","dataField","cell","target","directGet","pathArray","join","replace","split","curr","e","getCell","gap","startIndex","disabled","setStartIndex","setEndIndex","endIndex","undefined","setCurrentPage","name","address","city","street","country","phone","email","website","text","App","flexDirection","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a035280b.chunk.js","sourcesContent":["import React from 'react'\n\nconst ChevronDown = () => {\n  return (\n    <svg\n      width='24'\n      height='24'\n      viewBox='0 0 24 24'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'\n    >\n      <path\n        d='M6.34317 7.75732L4.92896 9.17154L12 16.2426L19.0711 9.17157L17.6569 7.75735L12 13.4142L6.34317 7.75732Z'\n        fill='currentColor'\n      />\n    </svg>\n  )\n}\n\nexport default ChevronDown\n","import React, { useState } from 'react'\nimport ChevronDown from '../assets/chevronDown'\n\ninterface DropdownProps {\n  paginationItemsPerPage?: number\n  itemsPerPage: number\n  setItemsPerPage: (itemsPerPage: number) => void\n  selectWrapperStyle?: React.CSSProperties\n  selectStyle?: React.CSSProperties\n}\n\nconst Dropdown = (props: DropdownProps) => {\n  const {\n    selectWrapperStyle,\n    // selectStyle,\n    paginationItemsPerPage,\n    itemsPerPage,\n    setItemsPerPage\n  } = props\n  const [showDropdown, setshowDropdown] = useState(false)\n  return (\n    <div style={selectWrapperStyle}>\n      <div\n        style={{ display: 'flex', cursor: 'pointer' }}\n        onClick={() => setshowDropdown(!showDropdown)}\n      >\n        <div>{itemsPerPage + ' items'}</div>\n\n        <ChevronDown />\n      </div>\n\n      {showDropdown && (\n        <div\n          style={{\n            position: 'absolute',\n            top: 50,\n            left: 0,\n            background: '#FFF',\n            padding: '6px 12px',\n            width: 100,\n            borderRadius: '8px',\n            borderWidth: '2px',\n            borderStyle: 'solid',\n            borderColor: 'rgba(156, 163, 175)'\n          }}\n        >\n          {[5, 10, 25, 50, paginationItemsPerPage].map((item) => (\n            <div\n              onClick={() => item && setItemsPerPage(item)}\n              style={{ padding: '6px 8px' }}\n              className='dropdownItem'\n            >\n              {item}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Dropdown\n","import React, { useState } from 'react'\nimport Dropdown from './components/Dropdown'\n// import CSS from 'csstype'\nimport getCell from './utils'\n\ninterface Props {\n  data: any[]\n  columns: any[]\n  paginationRequired?: boolean\n  paginationItemsPerPage?: number\n  tableWrapperStyle?: React.CSSProperties\n  tableStyle?: React.CSSProperties\n  tableHeaderStyle?: React.CSSProperties\n  tableHeaderCellsStyle?: React.CSSProperties\n  tableCellsStyle?: React.CSSProperties\n}\n\nconst ReactTableModern = (props: Props) => {\n  const {\n    data,\n    columns,\n    paginationRequired = true,\n    paginationItemsPerPage = 5\n  } = props\n\n  const [startIndex, setStartIndex] = useState(0)\n  const [endIndex, setEndIndex] = useState(5)\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [itemsPerPage, setItemsPerPage] = useState(paginationItemsPerPage)\n\n  const count = data.length || 0\n\n  const getTotalPages = () => {\n    return Math.ceil(count / itemsPerPage)\n  }\n\n  const getPageNumbers = () => {\n    let result: Array<number> = []\n    if (count && itemsPerPage) {\n      const totalPages = getTotalPages()\n\n      const allPages = []\n      for (let index = 0; index < totalPages; index++) {\n        allPages[index] = index + 1\n      }\n      if (totalPages === 0) return result\n\n      return allPages.slice(startIndex, endIndex)\n    }\n    return result\n  }\n\n  let paginatedDataArray = paginationRequired\n    ? data.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)\n    : data\n\n  const PaginationWrapperStyle: React.CSSProperties = {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingBottom: '1rem',\n    marginTop: '4px'\n  }\n\n  const selectWrapperStyle: React.CSSProperties = {\n    position: \"relative\",\n    backgroundColor: 'white',\n    borderRadius: '9999px',\n    paddingLeft: '1rem',\n    paddingRight: '0.5rem',\n    paddingTop: '0.5rem',\n    paddingBottom: '0.5rem',\n    borderWidth: '2px',\n    borderStyle: 'solid',\n    borderColor: 'rgba(156, 163, 175)',\n    outline: '2px solid transparent',\n    outlineOffset: '2px'\n  }\n\n  const selectStyle: React.CSSProperties = {\n    appearance: 'none',\n    outline: '2px solid transparent',\n    outlineOffset: '2px'\n  }\n\n  const nextAndPrevBtnStyle: React.CSSProperties = {\n    backgroundColor: '#F0F0F1',\n    borderRadius: '9999px',\n    padding: '0.5rem 1rem',\n    borderStyle: 'none',\n    color: 'black'\n  }\n\n  const paginationBtns: React.CSSProperties = {\n    borderRadius: '9999px',\n    color: 'black',\n    height: '2.5rem',\n    width: '2.5rem',\n    margin: '0 0.25rem',\n    borderStyle: 'solid'\n  }\n\n  const Pagination = () => {\n    return (\n      <div style={PaginationWrapperStyle}>\n        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem' }}>\n          <Dropdown\n            itemsPerPage={itemsPerPage}\n            setItemsPerPage={setItemsPerPage}\n            selectStyle={selectStyle}\n            selectWrapperStyle={selectWrapperStyle}\n            paginationItemsPerPage={paginationItemsPerPage}\n          />\n          {/* <div style={selectWrapperStyle}>\n            <select\n              style={selectStyle}\n              value={itemsPerPage}\n              onChange={(e) => {\n                let itemsPerPage = Number(e.target.value)\n                setItemsPerPage(itemsPerPage)\n              }}\n            >\n              {[5, 10, 25, 50, paginationItemsPerPage].map((item) => (\n                <option value={item}>{item + ' items'}</option>\n              ))}\n            </select>\n           <ChevronDown />\n          </div> */}\n          per page\n        </div>\n\n        <div>\n          <div style={{ display: 'flex' }}>\n            <button\n              style={{\n                ...nextAndPrevBtnStyle,\n                cursor: startIndex >= 5 ? 'pointer' : 'not-allowed'\n              }}\n              disabled={!(startIndex >= 5)}\n              onClick={() => {\n                if (startIndex < getTotalPages()) {\n                  if (startIndex >= 5) {\n                    setStartIndex(startIndex - 5)\n                    setEndIndex(endIndex - 5)\n                  }\n                }\n              }}\n            >\n              Previous\n            </button>\n            {getPageNumbers().length > 0 &&\n              getPageNumbers().map((item: number) => (\n                <button\n                  style={{\n                    ...paginationBtns,\n                    backgroundColor: currentPage === item ? '#FFF' : '#F0F0F1',\n                    borderWidth: currentPage === item ? 2 : undefined,\n                    borderColor:\n                      currentPage === item ? 'rgba(156, 163, 175)' : undefined\n                  }}\n                  onClick={() => setCurrentPage(item)}\n                >\n                  {item}\n                </button>\n              ))}\n            <button\n              style={{\n                ...nextAndPrevBtnStyle,\n                cursor: getTotalPages() > endIndex ? 'pointer' : 'not-allowed'\n              }}\n              disabled={!(getTotalPages() > endIndex)}\n              onClick={() => {\n                if (getTotalPages() > endIndex) {\n                  setStartIndex(startIndex + 5)\n                  setEndIndex(endIndex + 5)\n                }\n              }}\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const tableWrapperStyle: React.CSSProperties = {\n    backgroundColor: '#f9f9f9',\n    borderRadius: '0.5rem',\n    padding: 6,\n    ...props.tableWrapperStyle\n  }\n\n  const tableStyle: React.CSSProperties = {\n    borderCollapse: 'separate',\n    borderSpacing: '0.25em 0.25em',\n    width: '100%',\n    ...props.tableStyle\n  }\n\n  const tableHeaderStyle: React.CSSProperties = {\n    backgroundColor: '#f0f0f1',\n    color: '#9696a0',\n    fontWeight: 400,\n    ...props.tableHeaderStyle\n  }\n\n  const tableHeaderCellsStyle: React.CSSProperties = {\n    backgroundColor: '#f0f0f1',\n    paddingLeft: '1rem',\n    paddingRight: '1rem',\n    paddingTop: '0.5rem',\n    paddingBottom: '0.5rem',\n    borderRadius: '0.375rem',\n    ...props.tableHeaderCellsStyle\n  }\n\n  const tableCellsStyle: React.CSSProperties = {\n    paddingLeft: '1rem',\n    paddingRight: '1rem',\n    paddingTop: '0.5rem',\n    paddingBottom: '0.5rem',\n    backgroundColor: '#fff',\n    lineHeight: '2rem',\n    borderRadius: '0.375rem',\n    ...props.tableCellsStyle\n  }\n\n  return (\n    <div style={tableWrapperStyle}>\n      <table style={tableStyle}>\n        <tr style={tableHeaderStyle}>\n          {columns &&\n            columns.length > 0 &&\n            columns.map((column) => (\n              <td style={tableHeaderCellsStyle}>{column.text}</td>\n            ))}\n        </tr>\n\n        <tbody>\n          {data && data.length > 0 && paginatedDataArray\n            ? paginatedDataArray.map((item) => {\n                return (\n                  <tr>\n                    {columns &&\n                      columns.length > 0 &&\n                      columns.map((column) => {\n                        const { dataField } = column\n                        const cell = getCell(item, dataField)\n                        return <td style={tableCellsStyle}>{cell}</td>\n                      })}\n                  </tr>\n                )\n              })\n            : 'No Data!'}\n        </tbody>\n      </table>\n      <Pagination />\n    </div>\n  )\n}\n\nexport default ReactTableModern\n","function splitNested(str: string) {\n  return [str].join('.').replace(/\\[/g, '.').replace(/\\]/g, '').split('.')\n}\n\nfunction getCell(target: object, field: string) {\n  const directGet = target[field]\n  if (directGet !== undefined && directGet !== null) {\n    return directGet\n  }\n\n  const pathArray = splitNested(field)\n  let result\n  try {\n    result = pathArray.reduce((curr, path) => curr[path], target)\n  } catch (e) {}\n  return result\n}\n\nexport default getCell\n","import React from 'react'\nimport ReactTableModern from 'react-table-modern'\n\n\nconst data = [\n  {\n    name: 'Abdul Ghani',\n    address: { city: 'Hyd', street: 'stret', country: 'India' },\n    phone: '9191919191',\n    email: 'hello@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 2',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 3',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 4',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 5',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.tech'\n  },\n  {\n    name: 'Abdul Ghani 6',\n    address: { city: 'Bng', street: '1et', country: 'USA' },\n    phone: '9191975571',\n    email: 'hi@abdulghani.tech',\n    website: 'abdulghani.tech'\n  }\n]\n\nconst columns = [\n  {\n    dataField: 'name',\n    text: 'Name',\n  },\n  {\n    dataField: 'address.country',\n    text: 'Address',\n  },\n  {\n    dataField: 'phone',\n    text: 'Phone'\n  },\n  {\n    dataField: 'email',\n    text: 'Email'\n  },\n  {\n    dataField: 'website',\n    text: 'Website'\n  }\n]\n\nconst App = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n      }}\n    >\n      <h1>Say Hello to Modern React Table 🔥</h1>\n\n      <ReactTableModern\n        data={data}\n        columns={columns}\n        // paginationItemsPerPage={3}\n        // tableWrapperStyle={{backgroundColor: \"#FFF\"}}\n        // tableCellsStyle={{padding: 20}}\n        // paginationRequired={false}\n      />\n    </div>\n  )\n  \n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}